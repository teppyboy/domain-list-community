const fs = require('fs');
const https = require('https');
const path = require('path');

function processHosts(content) {
    let str = "# Generated by hosts-converter.js\n#\n";
    const lines = content.split("\n");
    lines.forEach((line) => {
        if (line.startsWith("0.0.0.0") || line.startsWith("127.0.0.1")) {
            line = line.split(" ")[1];
        }
        str += line + "\n";
    })
    return str;
}

function convertDir(dir, outDir) {
    var files = fs.readdirSync(dir);
    files.forEach((file) => {
        const fullPath = path.join(dir, file);
        fs.readFile(fullPath, (_, data) => {
            const filePath = path.parse(file);
            if (filePath.ext === ".txt") {
                const converted = processHosts(data.toString("utf-8"));
                const outName = `category-${filePath.name.toLowerCase()}`;
                const outPath = path.join(outDir, outName);
                fs.writeFileSync(outPath, converted);
                console.log(`Converted ${fullPath} to ${outName}`);
            }
        })
    })
}

function convertUrl(name, url, outDir) {
    const hostsUrl = new URL(url);
    const options = {
        hostname: hostsUrl.host,
        port: 443,
        path: hostsUrl.pathname,
        method: 'GET',
    };
    const req = https.request(options, res => {
        if (res.statusCode !== 200) {
            console.error(`Hosts ${url} return code is not 200.`);
            return;
        }
        let data = '';
        res.on('data', chunk => {
            data += chunk;
        });
        res.on('end', () => {
            const converted = processHosts(data.toString("utf-8"));
            const outName = `category-${name.toLowerCase()}`;
            const outPath = path.join(outDir, outName);
            fs.writeFileSync(outPath, converted);
            console.log(`Converted ${url} to ${outName}`);
        });
    }).end();
    
    // req.on('error', error => {
    //     console.error(error);
    // });
    
    // req.end();
}

function readConfig(configFile) {
    if (!fs.existsSync(configFile)) {
        console.error(`${configFile} does not exist.`);
        return;
    }
    const list = JSON.parse(fs.readFileSync(configFile, "utf8"));
    return list;
}

function main() {
    const config = readConfig("hosts-list.json");
    config.forEach(hosts => {
        console.log(`Converting hosts ${hosts.name} (type "${hosts.type}")`);
        switch(hosts.type) {
            case "dir":
                convertDir(hosts.hosts, "data");
                break;
            case "url":
                convertUrl(hosts.name, hosts.hosts, "data");
                break;
        } 
    })
}

main()